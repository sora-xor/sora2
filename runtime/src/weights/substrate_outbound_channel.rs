
//! Autogenerated weights for `substrate_bridge_channel::outbound`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `TRX40`, CPU: `AMD Ryzen Threadripper 3960X 24-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// target/release/framenode
// benchmark
// pallet
// --chain=local
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// substrate_bridge_channel::outbound
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `substrate_bridge_channel::outbound`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> substrate_bridge_channel::outbound::WeightInfo for WeightInfo<T> {
	/// Storage: SubstrateBridgeOutboundChannel MessageQueues (r:1 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel MessageQueues (max_values: None, max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel ChannelNonces (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel ChannelNonces (max_values: None, max_size: None, mode: Measured)
	fn submit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `31`
		//  Estimated: `5012`
		// Minimum execution time: 16_761 nanoseconds.
		Weight::from_parts(17_111_000, 5012)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: SubstrateBridgeOutboundChannel Interval (r:0 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel Interval (max_values: Some(1), max_size: None, mode: Measured)
	fn update_interval() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_921 nanoseconds.
		Weight::from_parts(10_191_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
