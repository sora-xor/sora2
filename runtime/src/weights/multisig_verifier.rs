// This file is part of the SORA network and Polkaswap app.

// Copyright (c) 2020, 2021, Polka Biome Ltd. All rights reserved.
// SPDX-License-Identifier: BSD-4-Clause

// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:

// Redistributions of source code must retain the above copyright notice, this list
// of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, this
// list of conditions and the following disclaimer in the documentation and/or other
// materials provided with the distribution.
//
// All advertising materials mentioning features or use of this software must display
// the following acknowledgement: This product includes software developed by Polka Biome
// Ltd., SORA, and Polkaswap.
//
// Neither the name of the Polka Biome Ltd. nor the names of its contributors may be used
// to endorse or promote products derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY Polka Biome Ltd. AS IS AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Polka Biome Ltd. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//! Autogenerated weights for `multisig_verifier`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-07, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `TRX40`, CPU: `AMD Ryzen Threadripper 3960X 24-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// ./target/release/framenode
// benchmark
// pallet
// --chain=local
// --steps=50
// --repeat=20
// --pallet=multisig_verifier
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --header=./misc/file_header.txt
// --output=./runtime/src/weights/multisig_verifier.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `multisig_verifier`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> multisig_verifier::WeightInfo for WeightInfo<T> {
	/// Storage: MultisigVerifier PeerKeys (r:0 w:1)
	/// Proof: MultisigVerifier PeerKeys (max_values: None, max_size: Some(1692), added: 4167, mode: MaxEncodedLen)
	fn initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 20_181 nanoseconds.
		Weight::from_ref_time(21_101_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: MultisigVerifier PeerKeys (r:1 w:1)
	/// Proof: MultisigVerifier PeerKeys (max_values: None, max_size: Some(1692), added: 4167, mode: MaxEncodedLen)
	/// Storage: SubstrateBridgeOutboundChannel MessageQueues (r:1 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel MessageQueues (max_values: None, max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel ChannelNonces (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel ChannelNonces (max_values: None, max_size: None, mode: Measured)
	fn add_peer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `429`
		//  Estimated: `9975`
		// Minimum execution time: 41_572 nanoseconds.
		Weight::from_parts(42_232_000, 9975)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: MultisigVerifier PeerKeys (r:1 w:1)
	/// Proof: MultisigVerifier PeerKeys (max_values: None, max_size: Some(1692), added: 4167, mode: MaxEncodedLen)
	/// Storage: SubstrateBridgeOutboundChannel MessageQueues (r:1 w:1)
	/// Proof Skipped: SubstrateBridgeOutboundChannel MessageQueues (max_values: None, max_size: None, mode: Measured)
	/// Storage: SubstrateBridgeOutboundChannel ChannelNonces (r:1 w:0)
	/// Proof Skipped: SubstrateBridgeOutboundChannel ChannelNonces (max_values: None, max_size: None, mode: Measured)
	fn remove_peer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `429`
		//  Estimated: `9975`
		// Minimum execution time: 41_612 nanoseconds.
		Weight::from_parts(42_292_000, 9975)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: MultisigVerifier ThisNetworkId (r:1 w:0)
	/// Proof: MultisigVerifier ThisNetworkId (max_values: Some(1), max_size: Some(33), added: 528, mode: MaxEncodedLen)
	/// Storage: MultisigVerifier PeerKeys (r:1 w:0)
	/// Proof: MultisigVerifier PeerKeys (max_values: None, max_size: Some(1692), added: 4167, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 50]`.
	fn verifier_verify(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `299 + a * (33 Â±0)`
		//  Estimated: `4695`
		// Minimum execution time: 56_773 nanoseconds.
		Weight::from_parts(16_389_514, 4695)
			// Standard Error: 35_503
			.saturating_add(Weight::from_ref_time(39_179_946).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(2))
	}
}
