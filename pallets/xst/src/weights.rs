// This file is part of the SORA network and Polkaswap app.

// Copyright (c) 2020, 2021, Polka Biome Ltd. All rights reserved.
// SPDX-License-Identifier: BSD-4-Clause

// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:

// Redistributions of source code must retain the above copyright notice, this list
// of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, this
// list of conditions and the following disclaimer in the documentation and/or other
// materials provided with the distribution.
//
// All advertising materials mentioning features or use of this software must display
// the following acknowledgement: This product includes software developed by Polka Biome
// Ltd., SORA, and Polkaswap.
//
// Neither the name of the Polka Biome Ltd. nor the names of its contributors may be used
// to endorse or promote products derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY Polka Biome Ltd. AS IS AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Polka Biome Ltd. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//! Autogenerated weights for `xst`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-16, STEPS: `10`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-qwerty.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// target/debug/framenode
// benchmark
// pallet
// --chain
// local
// --steps
// 10
// --repeat
// 10
// --pallet
// xst
// --extrinsic
// *
// --execution=native
// --output=pallets/xst/src/weights_raw.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use common::weights::constants::EXTRINSIC_FIXED_WEIGHT;
use sp_std::marker::PhantomData;

/// Weight functions for `xst`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
    /// Storage: XSTPool ReferenceAssetId (r:0 w:1)
    /// Proof Skipped: XSTPool ReferenceAssetId (max_values: Some(1), max_size: None, mode: Measured)
    fn set_reference_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 32_000 nanoseconds.
        Weight::from_ref_time(33_000_000)
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: XSTPool EnabledSymbols (r:1 w:1)
    /// Proof Skipped: XSTPool EnabledSymbols (max_values: None, max_size: None, mode: Measured)
    /// Storage: OracleProxy EnabledOracles (r:1 w:0)
    /// Proof Skipped: OracleProxy EnabledOracles (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: Band SymbolRates (r:2 w:0)
    /// Proof Skipped: Band SymbolRates (max_values: None, max_size: None, mode: Measured)
    /// Storage: Assets AssetOwners (r:1 w:0)
    /// Proof Skipped: Assets AssetOwners (max_values: None, max_size: None, mode: Measured)
    /// Storage: DEXManager DEXInfos (r:1 w:0)
    /// Proof Skipped: DEXManager DEXInfos (max_values: None, max_size: None, mode: Measured)
    /// Storage: TradingPair EnabledSources (r:1 w:0)
    /// Proof Skipped: TradingPair EnabledSources (max_values: None, max_size: None, mode: Measured)
    /// Storage: XSTPool EnabledSynthetics (r:0 w:1)
    /// Proof Skipped: XSTPool EnabledSynthetics (max_values: None, max_size: None, mode: Measured)
    fn enable_synthetic_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1558`
        //  Estimated: `26251`
        // Minimum execution time: 456_000 nanoseconds.
        Weight::from_parts(467_000_000, 26251)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: XSTPool EnabledSynthetics (r:1 w:1)
    /// Proof Skipped: XSTPool EnabledSynthetics (max_values: None, max_size: None, mode: Measured)
    /// Storage: XSTPool EnabledSymbols (r:0 w:1)
    /// Proof Skipped: XSTPool EnabledSymbols (max_values: None, max_size: None, mode: Measured)
    fn disable_synthetic_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `309`
        //  Estimated: `3093`
        // Minimum execution time: 130_000 nanoseconds.
        Weight::from_parts(131_000_000, 3093)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Assets AssetOwners (r:1 w:1)
    /// Proof Skipped: Assets AssetOwners (max_values: None, max_size: None, mode: Measured)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: Permissions Owners (r:2 w:2)
    /// Proof Skipped: Permissions Owners (max_values: None, max_size: None, mode: Measured)
    /// Storage: Permissions Permissions (r:3 w:1)
    /// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
    /// Storage: Assets AssetInfos (r:0 w:1)
    /// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
    fn register_synthetic_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1951`
        //  Estimated: `25257`
        // Minimum execution time: 630_000 nanoseconds.
        Weight::from_parts(633_000_000, 25257)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(6))
    }
    /// Storage: XSTPool EnabledSynthetics (r:1 w:1)
    /// Proof Skipped: XSTPool EnabledSynthetics (max_values: None, max_size: None, mode: Measured)
    fn set_synthetic_asset_fee() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `309`
        //  Estimated: `2784`
        // Minimum execution time: 105_000 nanoseconds.
        Weight::from_parts(106_000_000, 2784)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: XSTPool SyntheticBaseAssetFloorPrice (r:0 w:1)
    /// Proof Skipped: XSTPool SyntheticBaseAssetFloorPrice (max_values: Some(1), max_size: None, mode: Measured)
    fn set_synthetic_base_asset_floor_price() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 31_000 nanoseconds.
        Weight::from_ref_time(32_000_000)
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: XSTPool EnabledSynthetics (r:1 w:0)
    /// Proof Skipped: XSTPool EnabledSynthetics (max_values: None, max_size: None, mode: Measured)
    /// Storage: XSTPool ReferenceAssetId (r:1 w:0)
    /// Proof Skipped: XSTPool ReferenceAssetId (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: PriceTools PriceInfos (r:2 w:0)
    /// Proof Skipped: PriceTools PriceInfos (max_values: None, max_size: None, mode: Measured)
    /// Storage: XSTPool SyntheticBaseAssetFloorPrice (r:1 w:0)
    /// Proof Skipped: XSTPool SyntheticBaseAssetFloorPrice (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: OracleProxy EnabledOracles (r:1 w:0)
    /// Proof Skipped: OracleProxy EnabledOracles (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: OracleProxy SymbolProviders (r:1 w:0)
    /// Proof Skipped: OracleProxy SymbolProviders (max_values: None, max_size: None, mode: Measured)
    /// Storage: Band SymbolRates (r:1 w:0)
    /// Proof Skipped: Band SymbolRates (max_values: None, max_size: None, mode: Measured)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn quote() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3144`
        //  Estimated: `36371`
        // Minimum execution time: 421_000 nanoseconds.
        Weight::from_parts(427_000_000, 36371)
            .saturating_add(T::DbWeight::get().reads(9))
    }
    /// Storage: XSTPool EnabledSynthetics (r:1 w:0)
    /// Proof Skipped: XSTPool EnabledSynthetics (max_values: None, max_size: None, mode: Measured)
    /// Storage: XSTPool ReferenceAssetId (r:1 w:0)
    /// Proof Skipped: XSTPool ReferenceAssetId (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: PriceTools PriceInfos (r:2 w:0)
    /// Proof Skipped: PriceTools PriceInfos (max_values: None, max_size: None, mode: Measured)
    /// Storage: XSTPool SyntheticBaseAssetFloorPrice (r:1 w:0)
    /// Proof Skipped: XSTPool SyntheticBaseAssetFloorPrice (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: OracleProxy EnabledOracles (r:1 w:0)
    /// Proof Skipped: OracleProxy EnabledOracles (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: OracleProxy SymbolProviders (r:1 w:0)
    /// Proof Skipped: OracleProxy SymbolProviders (max_values: None, max_size: None, mode: Measured)
    /// Storage: Band SymbolRates (r:1 w:0)
    /// Proof Skipped: Band SymbolRates (max_values: None, max_size: None, mode: Measured)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Permissions Permissions (r:3 w:0)
    /// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
    /// Storage: Tokens Accounts (r:2 w:2)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:2 w:2)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
    /// Storage: Assets AssetInfos (r:1 w:0)
    /// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    fn exchange() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4865`
        //  Estimated: `80935`
        // Minimum execution time: 967_000 nanoseconds.
        Weight::from_parts(992_000_000, 80935)
            .saturating_add(T::DbWeight::get().reads(18))
            .saturating_add(T::DbWeight::get().writes(5))
    }
}

impl crate::WeightInfo for () {
    fn set_reference_asset() -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }
    fn enable_synthetic_asset() -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }
    fn disable_synthetic_asset() -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }
    fn register_synthetic_asset() -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }
    fn set_synthetic_asset_fee() -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }
    fn set_synthetic_base_asset_floor_price() -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }
    fn quote() -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }
    fn exchange() -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }
}
