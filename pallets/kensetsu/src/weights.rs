// This file is part of the SORA network and Polkaswap app.

// Copyright (c) 2020, 2021, Polka Biome Ltd. All rights reserved.
// SPDX-License-Identifier: BSD-4-Clause

// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:

// Redistributions of source code must retain the above copyright notice, this list
// of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, this
// list of conditions and the following disclaimer in the documentation and/or other
// materials provided with the distribution.
//
// All advertising materials mentioning features or use of this software must display
// the following acknowledgement: This product includes software developed by Polka Biome
// Ltd., SORA, and Polkaswap.
//
// Neither the name of the Polka Biome Ltd. nor the names of its contributors may be used
// to endorse or promote products derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY Polka Biome Ltd. AS IS AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Polka Biome Ltd. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//! Autogenerated weights for kensetsu
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-Alexey.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// target/release/framenode
// benchmark
// pallet
// --chain=local
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// kensetsu
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./pallets/kensetsu/src/weights.rs
// --template=./misc/pallet-weight-template.hbs
// --header=./misc/file_header.txt

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for kensetsu.
pub trait WeightInfo {
	fn create_cdp() -> Weight;
	fn close_cdp() -> Weight;
	fn deposit_collateral() -> Weight;
	fn borrow() -> Weight;
	fn repay_debt() -> Weight;
	fn liquidate() -> Weight;
	fn accrue() -> Weight;
	fn update_collateral_risk_parameters() -> Weight;
	fn update_hard_cap_total_supply() -> Weight;
	fn update_borrow_tax() -> Weight;
	fn update_liquidation_penalty() -> Weight;
	fn withdraw_profit() -> Weight;
	fn donate() -> Weight;
	fn add_risk_manager() -> Weight;
	fn remove_risk_manager() -> Weight;
}

/// Weights for kensetsu using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Kensetsu NextCDPId (r:1 w:1)
	/// Proof: Kensetsu NextCDPId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Kensetsu CdpOwnerIndex (r:1 w:1)
	/// Proof: Kensetsu CdpOwnerIndex (max_values: None, max_size: Some(1634), added: 4109, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Kensetsu BadDebt (r:1 w:0)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Assets AssetInfos (r:1 w:0)
	/// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	/// Storage: Kensetsu BorrowTax (r:1 w:0)
	/// Proof: Kensetsu BorrowTax (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: PriceTools PriceInfos (r:1 w:0)
	/// Proof Skipped: PriceTools PriceInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: Kensetsu KusdHardCap (r:1 w:0)
	/// Proof: Kensetsu KusdHardCap (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	/// Storage: Kensetsu CDPDepository (r:0 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn create_cdp() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5722`
		//  Estimated: `54851`
		// Minimum execution time: 119_000_000 picoseconds.
		Weight::from_parts(121_000_000, 54851)
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: Kensetsu CDPDepository (r:1 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Kensetsu BadDebt (r:1 w:0)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets AssetInfos (r:1 w:0)
	/// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	/// Storage: Kensetsu CdpOwnerIndex (r:1 w:1)
	/// Proof: Kensetsu CdpOwnerIndex (max_values: None, max_size: Some(1634), added: 4109, mode: MaxEncodedLen)
	fn close_cdp() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2231`
		//  Estimated: `26918`
		// Minimum execution time: 48_000_000 picoseconds.
		Weight::from_parts(49_000_000, 26918)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Kensetsu CDPDepository (r:1 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn deposit_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1524`
		//  Estimated: `11808`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(43_000_000, 11808)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Kensetsu CDPDepository (r:1 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Kensetsu BadDebt (r:1 w:0)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets AssetInfos (r:1 w:0)
	/// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	/// Storage: Kensetsu BorrowTax (r:1 w:0)
	/// Proof: Kensetsu BorrowTax (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: PriceTools PriceInfos (r:1 w:0)
	/// Proof Skipped: PriceTools PriceInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: Kensetsu KusdHardCap (r:1 w:0)
	/// Proof: Kensetsu KusdHardCap (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	fn borrow() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5531`
		//  Estimated: `46864`
		// Minimum execution time: 81_000_000 picoseconds.
		Weight::from_parts(87_000_000, 46864)
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Kensetsu CDPDepository (r:1 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Kensetsu BadDebt (r:1 w:0)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets AssetInfos (r:1 w:0)
	/// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	fn repay_debt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3121`
		//  Estimated: `30621`
		// Minimum execution time: 68_000_000 picoseconds.
		Weight::from_parts(69_000_000, 30621)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Kensetsu CDPDepository (r:1 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Kensetsu BadDebt (r:1 w:0)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:3 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets AssetInfos (r:1 w:0)
	/// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	/// Storage: PriceTools PriceInfos (r:2 w:1)
	/// Proof Skipped: PriceTools PriceInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Kensetsu LiquidationPenalty (r:1 w:0)
	/// Proof: Kensetsu LiquidationPenalty (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: DEXManager DEXInfos (r:1 w:0)
	/// Proof Skipped: DEXManager DEXInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: XSTPool EnabledSynthetics (r:2 w:0)
	/// Proof Skipped: XSTPool EnabledSynthetics (max_values: None, max_size: None, mode: Measured)
	/// Storage: DEXAPI EnabledSourceTypes (r:1 w:0)
	/// Proof Skipped: DEXAPI EnabledSourceTypes (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: PoolXYK Properties (r:1 w:0)
	/// Proof Skipped: PoolXYK Properties (max_values: None, max_size: None, mode: Measured)
	/// Storage: MulticollateralBondingCurvePool EnabledTargets (r:1 w:0)
	/// Proof Skipped: MulticollateralBondingCurvePool EnabledTargets (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OrderBook OrderBooks (r:1 w:0)
	/// Proof: OrderBook OrderBooks (max_values: None, max_size: Some(238), added: 2713, mode: MaxEncodedLen)
	/// Storage: TradingPair LockedLiquiditySources (r:1 w:0)
	/// Proof Skipped: TradingPair LockedLiquiditySources (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	/// Storage: Assets AssetOwners (r:1 w:0)
	/// Proof Skipped: Assets AssetOwners (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: PoolXYK Reserves (r:0 w:1)
	/// Proof Skipped: PoolXYK Reserves (max_values: None, max_size: None, mode: Measured)
	fn liquidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8035`
		//  Estimated: `155067`
		// Minimum execution time: 284_000_000 picoseconds.
		Weight::from_parts(299_000_000, 155067)
			.saturating_add(T::DbWeight::get().reads(28_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: Kensetsu CDPDepository (r:1 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Kensetsu BadDebt (r:1 w:0)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets AssetInfos (r:1 w:0)
	/// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	fn accrue() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2325`
		//  Estimated: `23091`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_000_000, 23091)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:0)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Assets AssetOwners (r:1 w:0)
	/// Proof Skipped: Assets AssetOwners (max_values: None, max_size: None, mode: Measured)
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn update_collateral_risk_parameters() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `829`
		//  Estimated: `10103`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 10103)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:0)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Kensetsu KusdHardCap (r:1 w:1)
	/// Proof: Kensetsu KusdHardCap (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn update_hard_cap_total_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238`
		//  Estimated: `4208`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 4208)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:0)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Kensetsu BorrowTax (r:1 w:1)
	/// Proof: Kensetsu BorrowTax (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn update_borrow_tax() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238`
		//  Estimated: `4193`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 4193)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:0)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Kensetsu LiquidationPenalty (r:1 w:1)
	/// Proof: Kensetsu LiquidationPenalty (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn update_liquidation_penalty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238`
		//  Estimated: `4193`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 4193)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:0)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw_profit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1737`
		//  Estimated: `18337`
		// Minimum execution time: 45_000_000 picoseconds.
		Weight::from_parts(46_000_000, 18337)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Kensetsu BadDebt (r:1 w:1)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	fn donate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2339`
		//  Estimated: `25573`
		// Minimum execution time: 65_000_000 picoseconds.
		Weight::from_parts(65_000_000, 25573)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:1)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	fn add_risk_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `3697`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 3697)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:1)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	fn remove_risk_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `3697`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 3697)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Kensetsu NextCDPId (r:1 w:1)
	/// Proof: Kensetsu NextCDPId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Kensetsu CdpOwnerIndex (r:1 w:1)
	/// Proof: Kensetsu CdpOwnerIndex (max_values: None, max_size: Some(1634), added: 4109, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Kensetsu BadDebt (r:1 w:0)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Assets AssetInfos (r:1 w:0)
	/// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	/// Storage: Kensetsu BorrowTax (r:1 w:0)
	/// Proof: Kensetsu BorrowTax (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: PriceTools PriceInfos (r:1 w:0)
	/// Proof Skipped: PriceTools PriceInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: Kensetsu KusdHardCap (r:1 w:0)
	/// Proof: Kensetsu KusdHardCap (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	/// Storage: Kensetsu CDPDepository (r:0 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn create_cdp() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5722`
		//  Estimated: `54851`
		// Minimum execution time: 119_000_000 picoseconds.
		Weight::from_parts(121_000_000, 54851)
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: Kensetsu CDPDepository (r:1 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Kensetsu BadDebt (r:1 w:0)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets AssetInfos (r:1 w:0)
	/// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	/// Storage: Kensetsu CdpOwnerIndex (r:1 w:1)
	/// Proof: Kensetsu CdpOwnerIndex (max_values: None, max_size: Some(1634), added: 4109, mode: MaxEncodedLen)
	fn close_cdp() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2231`
		//  Estimated: `26918`
		// Minimum execution time: 48_000_000 picoseconds.
		Weight::from_parts(49_000_000, 26918)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Kensetsu CDPDepository (r:1 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn deposit_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1524`
		//  Estimated: `11808`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(43_000_000, 11808)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Kensetsu CDPDepository (r:1 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Kensetsu BadDebt (r:1 w:0)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets AssetInfos (r:1 w:0)
	/// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	/// Storage: Kensetsu BorrowTax (r:1 w:0)
	/// Proof: Kensetsu BorrowTax (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: PriceTools PriceInfos (r:1 w:0)
	/// Proof Skipped: PriceTools PriceInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: Kensetsu KusdHardCap (r:1 w:0)
	/// Proof: Kensetsu KusdHardCap (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	fn borrow() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5531`
		//  Estimated: `46864`
		// Minimum execution time: 81_000_000 picoseconds.
		Weight::from_parts(87_000_000, 46864)
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Kensetsu CDPDepository (r:1 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Kensetsu BadDebt (r:1 w:0)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets AssetInfos (r:1 w:0)
	/// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	fn repay_debt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3121`
		//  Estimated: `30621`
		// Minimum execution time: 68_000_000 picoseconds.
		Weight::from_parts(69_000_000, 30621)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Kensetsu CDPDepository (r:1 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Kensetsu BadDebt (r:1 w:0)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:3 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets AssetInfos (r:1 w:0)
	/// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	/// Storage: PriceTools PriceInfos (r:2 w:1)
	/// Proof Skipped: PriceTools PriceInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Kensetsu LiquidationPenalty (r:1 w:0)
	/// Proof: Kensetsu LiquidationPenalty (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: DEXManager DEXInfos (r:1 w:0)
	/// Proof Skipped: DEXManager DEXInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: XSTPool EnabledSynthetics (r:2 w:0)
	/// Proof Skipped: XSTPool EnabledSynthetics (max_values: None, max_size: None, mode: Measured)
	/// Storage: DEXAPI EnabledSourceTypes (r:1 w:0)
	/// Proof Skipped: DEXAPI EnabledSourceTypes (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: PoolXYK Properties (r:1 w:0)
	/// Proof Skipped: PoolXYK Properties (max_values: None, max_size: None, mode: Measured)
	/// Storage: MulticollateralBondingCurvePool EnabledTargets (r:1 w:0)
	/// Proof Skipped: MulticollateralBondingCurvePool EnabledTargets (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: OrderBook OrderBooks (r:1 w:0)
	/// Proof: OrderBook OrderBooks (max_values: None, max_size: Some(238), added: 2713, mode: MaxEncodedLen)
	/// Storage: TradingPair LockedLiquiditySources (r:1 w:0)
	/// Proof Skipped: TradingPair LockedLiquiditySources (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	/// Storage: Assets AssetOwners (r:1 w:0)
	/// Proof Skipped: Assets AssetOwners (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: PoolXYK Reserves (r:0 w:1)
	/// Proof Skipped: PoolXYK Reserves (max_values: None, max_size: None, mode: Measured)
	fn liquidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8035`
		//  Estimated: `155067`
		// Minimum execution time: 284_000_000 picoseconds.
		Weight::from_parts(299_000_000, 155067)
			.saturating_add(RocksDbWeight::get().reads(28_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
	}
	/// Storage: Kensetsu CDPDepository (r:1 w:1)
	/// Proof: Kensetsu CDPDepository (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Kensetsu BadDebt (r:1 w:0)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Assets AssetInfos (r:1 w:0)
	/// Proof Skipped: Assets AssetInfos (max_values: None, max_size: None, mode: Measured)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	fn accrue() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2325`
		//  Estimated: `23091`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_000_000, 23091)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:0)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Assets AssetOwners (r:1 w:0)
	/// Proof Skipped: Assets AssetOwners (max_values: None, max_size: None, mode: Measured)
	/// Storage: Kensetsu CollateralInfos (r:1 w:1)
	/// Proof: Kensetsu CollateralInfos (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn update_collateral_risk_parameters() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `829`
		//  Estimated: `10103`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 10103)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:0)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Kensetsu KusdHardCap (r:1 w:1)
	/// Proof: Kensetsu KusdHardCap (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn update_hard_cap_total_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238`
		//  Estimated: `4208`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 4208)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:0)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Kensetsu BorrowTax (r:1 w:1)
	/// Proof: Kensetsu BorrowTax (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn update_borrow_tax() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238`
		//  Estimated: `4193`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 4193)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:0)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Kensetsu LiquidationPenalty (r:1 w:1)
	/// Proof: Kensetsu LiquidationPenalty (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn update_liquidation_penalty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238`
		//  Estimated: `4193`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 4193)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:0)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw_profit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1737`
		//  Estimated: `18337`
		// Minimum execution time: 45_000_000 picoseconds.
		Weight::from_parts(46_000_000, 18337)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Kensetsu BadDebt (r:1 w:1)
	/// Proof: Kensetsu BadDebt (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Technical TechAccounts (r:1 w:0)
	/// Proof Skipped: Technical TechAccounts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(136), added: 2611, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Permissions Permissions (r:2 w:0)
	/// Proof Skipped: Permissions Permissions (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	fn donate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2339`
		//  Estimated: `25573`
		// Minimum execution time: 65_000_000 picoseconds.
		Weight::from_parts(65_000_000, 25573)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:1)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	fn add_risk_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `3697`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 3697)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Kensetsu RiskManagers (r:1 w:1)
	/// Proof: Kensetsu RiskManagers (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	fn remove_risk_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `3697`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 3697)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
