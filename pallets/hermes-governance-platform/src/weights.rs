
//! Autogenerated weights for `hermes_governance_platform`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `DESKTOP-RLHNAHJ`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// target\release\framenode.exe
// benchmark
// pallet
// --chain=local
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// hermes_governance_platform
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use common::weights::constants::EXTRINSIC_FIXED_WEIGHT;

/// Weight functions for `hermes_governance_platform`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: HermesGovernancePlatform HermesPollData (r:1 w:0)
	// Storage: HermesGovernancePlatform MinimumHermesVotingAmount (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: HermesGovernancePlatform HermesVotings (r:1 w:1)
	// Storage: System Account (r:2 w:1)
	fn vote() -> Weight {
		(92_900_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: HermesGovernancePlatform MinimumHermesAmountForCreatingPoll (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:2 w:1)
	// Storage: HermesGovernancePlatform HermesPollData (r:0 w:1)
	fn create_poll() -> Weight {
		(85_200_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: HermesGovernancePlatform HermesPollData (r:1 w:0)
	// Storage: HermesGovernancePlatform HermesVotings (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	fn withdraw_funds_voter() -> Weight {
		(69_900_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: HermesGovernancePlatform HermesPollData (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	fn withdraw_funds_creator() -> Weight {
		(56_700_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: HermesGovernancePlatform AuthorityAccount (r:1 w:0)
	// Storage: HermesGovernancePlatform MinimumHermesVotingAmount (r:0 w:1)
	fn change_min_hermes_for_voting() -> Weight {
		(18_100_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: HermesGovernancePlatform AuthorityAccount (r:1 w:0)
	// Storage: HermesGovernancePlatform MinimumHermesAmountForCreatingPoll (r:0 w:1)
	fn change_min_hermes_for_creating_poll() -> Weight {
		(18_300_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

impl crate::WeightInfo for () {
	fn vote() -> Weight {
		EXTRINSIC_FIXED_WEIGHT
	}
	fn create_poll() -> Weight {
		EXTRINSIC_FIXED_WEIGHT
	}
	fn withdraw_funds_voter() -> Weight { EXTRINSIC_FIXED_WEIGHT}
	fn withdraw_funds_creator() -> Weight { EXTRINSIC_FIXED_WEIGHT}
	fn change_min_hermes_for_voting() -> Weight { EXTRINSIC_FIXED_WEIGHT}
	fn change_min_hermes_for_creating_poll() -> Weight { EXTRINSIC_FIXED_WEIGHT}
}
