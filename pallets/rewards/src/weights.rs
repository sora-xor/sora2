// This file is part of the SORA network and Polkaswap app.

// Copyright (c) 2020, 2021, Polka Biome Ltd. All rights reserved.
// SPDX-License-Identifier: BSD-4-Clause

// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:

// Redistributions of source code must retain the above copyright notice, this list
// of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, this
// list of conditions and the following disclaimer in the documentation and/or other
// materials provided with the distribution.
//
// All advertising materials mentioning features or use of this software must display
// the following acknowledgement: This product includes software developed by Polka Biome
// Ltd., SORA, and Polkaswap.
//
// Neither the name of the Polka Biome Ltd. nor the names of its contributors may be used
// to endorse or promote products derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY Polka Biome Ltd. AS IS AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Polka Biome Ltd. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//! Autogenerated weights for `rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-31, STEPS: `10`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `MacBook-Pro-qwerty.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// ./target/debug/framenode
// benchmark
// pallet
// --chain=local
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// rewards
// --extrinsic
// *
// --steps
// 10
// --repeat
// 2
// --output
// pallets/rewards/src/weigths_raw1.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use common::prelude::constants::EXTRINSIC_FIXED_WEIGHT;

/// Weight functions for `rewards`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
    // Storage: Rewards ReservesAcc (r:1 w:0)
    // Storage: Rewards ValOwners (r:1 w:1)
    // Storage: Technical TechAccounts (r:1 w:0)
    // Storage: Tokens Accounts (r:4 w:4)
    // Storage: System Account (r:2 w:1)
    // Storage: Rewards TotalValRewards (r:1 w:1)
    // Storage: Rewards TotalClaimableVal (r:1 w:1)
    // Storage: Rewards PswapFarmOwners (r:1 w:1)
    // Storage: Rewards PswapWaifuOwners (r:1 w:1)
    // Storage: Rewards UmiNftReceivers (r:1 w:0)
    fn claim() -> Weight {
        // Minimum execution time: 2_380_000 nanoseconds.
        Weight::from_ref_time(2_399_000_000 as u64)
            .saturating_add(T::DbWeight::get().reads(14 as u64))
            .saturating_add(T::DbWeight::get().writes(10 as u64))
    }
    // Storage: Rewards UmiNftClaimed (r:1 w:0)
    // Storage: Rewards UmiNfts (r:1 w:0)
    // Storage: Rewards UmiNftReceivers (r:0 w:1)
    /// The range of component `n` is `[1, 1000]`.
    fn add_umi_nfts_receivers(n: u64, ) -> Weight {
        // Minimum execution time: 199_000 nanoseconds.
        Weight::from_ref_time(199_000_000 as u64)
            // Standard Error: 115_239
            .saturating_add(Weight::from_ref_time(54_319_538 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(n as u64)))
    }
}

impl crate::WeightInfo for () {
    fn claim() -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }

    fn add_umi_nfts_receivers(_: u64) -> Weight {
        EXTRINSIC_FIXED_WEIGHT
    }
}
