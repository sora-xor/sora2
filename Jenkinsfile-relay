@Library('jenkins-library' ) _

String agentLabel = 'docker-build-agent'
String registry = "docker.soramitsu.co.jp"
String dockerBuildToolsUserId = 'bot-build-tools-ro'
String dockerRegistryRWUserId = 'bot-sora2-rw'
String imageName = "docker.soramitsu.co.jp/sora2/polkadot-relaychain"

properties([
    parameters([
        string(defaultValue: 'fd4b176f', name: 'polkadotCommit', trim: true, description: "It MUST be short version hash")
    ])
])

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        timestamps()
        disableConcurrentBuilds()
    }

    agent {
        label agentLabel
    }

    stages {
        stage('Build image') {
            steps{
                script {
                    gitNotify("polkadot-CI", "PENDING", "This commit is being built")
                    if ( polkadotCommit.length() != 8 ) {
                        error("You MUST use short version hash of commit!")
                    }
                    sh "docker build --build-arg POLKADOT_COMMIT=${polkadotCommit} -f housekeeping/docker/relay/Dockerfile -t ${imageName}:${polkadotCommit} ."
                }
            }
        }
        stage('Push Image') {
            steps{
                script {
                    docker.withRegistry( "https://" + registry, dockerRegistryRWUserId) {
                        sh """
                            docker push ${imageName}:${polkadotCommit}
                            docker tag ${imageName}:${polkadotCommit} ${imageName}:latest
                            docker push ${imageName}:latest
                        """
                    }
                }
            }
        }
    }
    post {
        success {
            script { gitNotify("polkadot-CI", "SUCCESS", "Success")}
        }
        failure {
            script { gitNotify("polkadot-CI", "FAILURE", "Failure")}
        }
        aborted {
            script { gitNotify("polkadot-CI", "FAILURE", "Aborted")}
        }
        cleanup { cleanWs() }
    }
}